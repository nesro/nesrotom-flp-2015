(defun rozmer (m)
	(cons (length m) (length (car m))))

(defun rozmer2 (m)
	(if (null m)
		0
		(+ 1 (rozmer2 (cdr m)))))

(defun rozmer3 (m)
	(cons (rozmer2 m) (rozmer2 (car m))))

(defun radek (m i)
	(if (= i 0)
		(car m)
		(radek (cdr m) (- i 1))))







(defun sloupec (m i)
	(if (not (null m))
		(cons (nth i (car m)) (sloupec (cdr m) i))))

(defun trans (m i)
	(if (= i 0)
		(list (sloupec m i))
		(cons (sloupec m i) (trans m (- i 1)))))

(defun oloupej (m)
	(if (> (length m) 1)
		(append (car m) (oloupej (trans (cdr m) 
			  (- (length (cdr (car m()) 1))))))

;(write (trans (list (list 1 2) (list 3 4)(list 5 6)) 1))
;(write (trans (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 2))
;(write (oloupej (list (list 1 2 3) (list 4 5 6) (list 7 8 9))))
;(write (trans (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 3))
;(write (sloupec (list (list 1 2) (list 3 4)) 0))
;(write (sloupec (list (list 1 2) (list 3 4)) 1))





; swap prvni a druhy item v listu
(defun swap (m)
	(cons (cadr m) (cons (car m) (cddr m))))

(defun swap2 (m)
	(cond
		(null m) NIL) ; n=0
		(null (cdr S) S) ; n=1
		(T (swap m))) ; 1 < n

;(write (rozmer (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12))))
;(write (rozmer3 (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12))))
;(write (radek (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)) 2))
;(write (sloupec (list (list 1 2 3) (list 4 5 6) (list 7 8 9)) 1))
;(write (swap (list 1 2 3)))
